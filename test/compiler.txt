id = \x.x
const = \a.\b.a
ignore = \a.\b.b
flip = \f.\x.\y.f y x
curry = \f.\a1.\a2.f (T a1 a2)

add = curry $add
sub = curry $sub
mult = curry $mult
index = curry $index
subString = \s.\start.\length.$subString(T3 s start length)
intSlt = curry $intSlt
writeRef = curry $writeRef

intEq = \i1.\i2.(\0.False|1.True)(curry $intEq i1 i2)
intLteq = \i1.\i2.(\0.False|1.True)(curry $intSle i1 i2)
charEq = \c1.\c2.(\0.False|1.True)(curry $charEq c1 c2)

not = \True.False|False.True
or = \True.const True|False.id
and = \False.const False|True.id

isInRange = \start.\end.\c.and(intLteq ($ord start) ($ord c)) (intLteq ($ord c) ($ord end))
isDigit = isInRange '0' '9'
isLower = isInRange 'a' 'z'
isUpper = isInRange 'A' 'Z'
isAlphaNum = \c.or (isUpper c) (or (isLower c) (isDigit c))

modify = \f.\ref.writeRef ref (f ($readRef ref))
strfoldl = \f.\s.$fix\rec.\acc.\i.(\True.acc|False.rec (f acc (index s i)) (add 1 i))(intEq i ($strLen s))
foldl = \f.$fix\rec.\acc.\Nil.acc|Cons x xs.rec (f acc x) xs
foldl1 = \f.\Cons x xs.foldl f x xs
stringToInt = \s.strfoldl (\cur.\char.add (mult 10 cur) (sub ($ord char) ($ord '0'))) s 0 0
mapMaybe = \f.\None.None|Some x.Some(f x)
seq = \comb.\p1.\p2.\s.(\None.None|Some v1.(\None.None|Some v2.Some(comb v1 v2))(p2 s))(p1 s)

pfst = seq const
psnd = seq ignore
between = \first.\middle.\end.psnd first (pfst middle end)
pmap = \f.\p.\s.mapMaybe f (p s)

mkStream = \s.Stream s ($newRef 0)
tryGetCurChar = \Stream s iRef.(\i.(\1.Some(index s i)|0.None)(intSlt i ($strLen s)))($readRef iRef)
advance = \Stream _ iRef.modify (add 1) iRef
getIndex = \Stream _ iRef.$readRef iRef
getString = \Stream s _.s
setIndex = \newIndex.\Stream _ iRef.modify (const newIndex) iRef

choice = \p1.\p2.\s.(\before.(\None.ignore(setIndex before s)(p2 s)|sv1.sv1)(p1 s))(getIndex s)

mkRec = $fix\rec.\recCtor.\s.(\p.p s)(recCtor (\_.rec recCtor))
many = \p.mkRec\rec.choice (seq Cons p (rec U)) (const (Some Nil))
many1 = \p.seq Cons p (many p)
sepBy1 = \p.\sep.seq Cons p (many (psnd sep p))
pcomb = \ctor.\p.pmap(\l.foldl1 ctor l)(many1 p)

pred1 = \pred.\s.(\Some True.Some(advance s)|_.None)(mapMaybe pred (tryGetCurChar s))
char = \c.pred1(charEq c)

ppos = \s.Some (getIndex s)
manyRange = \p.\comb.\s.seq (comb (getString s)) ppos (mkRec\rec.choice (psnd p (rec U)) ppos) s

manyI = \pred.manyRange(pred1 pred)(\_.\_.\end.end)
predCh = \pred.\s.mapMaybe(\i.index (getString s)(sub i 1))(pred1 pred s)
word = \firstPred.\followPred.\s.seq (\fc.\e.subString (getString s) (sub fc 1) (add 1 (sub e fc))) (pred1 firstPred) (manyI followPred) s
manyPred = \pred.manyRange(pred1 pred)(\str.\start.\end.subString str start (sub end start))
upperId = word isUpper isAlphaNum
lowerId = word isLower isAlphaNum
primId = psnd (char '$') (word isAlphaNum isAlphaNum)
comment = seq T (char '#') (manyPred (\c.not(charEq '\n' c)))
space = seq T (manyI (charEq ' ')) (many comment)
lex = psnd space
decimal = pmap stringToInt (word isDigit isDigit)
qstring = between (char '\"') (manyPred (\c.not(charEq '\"' c))) (char '\"')
ch = \c.lex (char c)
parens = \p.between (ch '(') p (ch ')')
escapef = \'n'.Some '\n'|'\\'.Some '\\'|'\"'.Some '\"'|_.None
escape = \s.(\None.None|Some None.None|Some sc.ignore (advance s) sc)(mapMaybe escapef (tryGetCurChar s))
qchar = between (char ''') (choice (psnd (char '\\') escape) (predCh (const True))) (char ''')
pconst = choice (pmap (\s.CInt s) decimal) (choice (pmap CAtom upperId) (choice (pmap CString qstring) (pmap CChar qchar)))
ppatternAtom = lex (choice (pmap (const PWildcard) (ch '_')) (choice (pmap PConstant pconst) (pmap PVariable lowerId)))
ppattern = mkRec\rec.pcomb PApply (choice ppatternAtom (pmap PParenthesis (parens (rec U))))
pexpAtom = lex (choice (pmap EConstant pconst) (choice (pmap EVariable lowerId) (pmap EPrim primId)))
pexp = mkRec\rec.pcomb EApply (choice pexpAtom (choice (pmap EParenthesis (parens (rec U))) (pmap ELambda (psnd (ch '\\') (sepBy1 (seq Case ppattern (psnd (ch '.') (rec U))) (ch '|'))))))
pdecl = seq Decl ppattern (psnd (ch '=') pexp)
newline = seq T (many comment) (char '\n')
pdecls = sepBy1 pdecl (many1 newline)
eof = \s.(\False.None|True.Some U)(intEq (getIndex s) ($strLen (getString s)))

parser = pfst pdecls (pfst (many newline) eof)
p = \str.parser (mkStream str)
_ = p ($readFile "test/compiler.txt")
